# Generated by Django 3.2.12 on 2023-12-07 08:09

from django.db import migrations, models
import django.db.models.deletion
import ifbcat_api.validators


def migrate(apps, schema_editor):
    ServiceCategory = apps.get_model("ifbcat_api", "ServiceCategory")
    for name in [
        'Software development',
        'Data analysis',
    ]:
        ServiceCategory.objects.get_or_create(name=name)
    LifeScienceCommunity = apps.get_model("ifbcat_api", "LifeScienceCommunity")
    for name in [
        'Human',
        'Plants',
        'Animals',
        'Micro-organisms',
        'Environment',
        'Health',
    ]:
        LifeScienceCommunity.objects.get_or_create(name=name)
    ServiceDomain = apps.get_model("ifbcat_api", "ServiceDomain")
    for name in [
        'Génomique',
        'Transcriptomique',
        'Métagenomique',
    ]:
        ServiceDomain.objects.get_or_create(name=name)
    KindOfAnalysis = apps.get_model("ifbcat_api", "KindOfAnalysis")
    for name in [
        "Correction et nettoyage des données",
        "RNAseq",
        'Chip-seq',
        'ATAC-seq',
    ]:
        KindOfAnalysis.objects.get_or_create(name=name)


class Migration(migrations.Migration):
    dependencies = [
        ('ifbcat_api', '0190_auto_20231127_1401'),
    ]

    operations = [
        migrations.CreateModel(
            name='KindOfAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        max_length=255, unique=True, validators=[ifbcat_api.validators.validate_can_be_looked_up]
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LifeScienceCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        max_length=255, unique=True, validators=[ifbcat_api.validators.validate_can_be_looked_up]
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        max_length=255, unique=True, validators=[ifbcat_api.validators.validate_can_be_looked_up]
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        max_length=255, unique=True, validators=[ifbcat_api.validators.validate_can_be_looked_up]
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField(blank=True, null=True)),
                (
                    'training',
                    models.CharField(
                        choices=[('No', 'No'), ('Recurrent', 'Recurrent'), ('Custom', 'Custom')],
                        default='No',
                        max_length=10,
                    ),
                ),
                (
                    'mentoring',
                    models.BooleanField(
                        default=False,
                    ),
                ),
                (
                    'collaboration',
                    models.CharField(
                        choices=[
                            ('No', 'No'),
                            ('Standard', 'Standard'),
                            ('Custom', 'Custom'),
                            ('both', 'Standard and custom'),
                        ],
                        default='No',
                        max_length=10,
                    ),
                ),
                (
                    'prestation',
                    models.CharField(
                        choices=[
                            ('No', 'No'),
                            ('Standard', 'Standard'),
                            ('Custom', 'Custom'),
                            ('both', 'Standard and custom'),
                        ],
                        default='No',
                        max_length=10,
                    ),
                ),
                (
                    'analysis',
                    models.ForeignKey(
                        help_text='Kind of analysis proposed.',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ifbcat_api.kindofanalysis',
                        verbose_name='Action',
                    ),
                ),
                (
                    'category',
                    models.ForeignKey(
                        help_text='Category of service it belongs.',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ifbcat_api.servicecategory',
                    ),
                ),
                (
                    'communities',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Biological community concerned. Example: Human, plants, animals, micro-organism, health, ...',
                        to='ifbcat_api.LifeScienceCommunity',
                    ),
                ),
                (
                    'domain',
                    models.ForeignKey(
                        help_text='Domain of the service.',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='ifbcat_api.servicedomain',
                    ),
                ),
                (
                    'team',
                    models.ForeignKey(
                        help_text='The bioinformatics team(s) that provides this service.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='services',
                        to='ifbcat_api.team',
                    ),
                ),
            ],
            options={
                'unique_together': {('team', 'domain', 'analysis')},
            },
        ),
        migrations.RunPython(code=migrate, reverse_code=migrations.RunPython.noop),
    ]
