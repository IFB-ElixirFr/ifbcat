# Generated by Django 3.2.12 on 2022-03-04 16:50

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ifbcat_api', '0179_alter_community_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('homepage', models.URLField(blank=True, help_text='Homepage of the tool.', max_length=512, null=True)),
                ('fairsharingID', models.CharField(max_length=100)),
                ('documentation', models.URLField(blank=True, help_text='Link toward general documentation of the tool', max_length=512, null=True)),
                ('citations', models.CharField(blank=True, max_length=1000, null=True)),
                ('link', models.CharField(blank=True, help_text='Link of the tool toward FAIRsharing.', max_length=1000, null=True)),
                ('downloads', models.CharField(blank=True, max_length=1000, null=True)),
                ('annual_visits', models.IntegerField(blank=True, null=True)),
                ('unique_visits', models.IntegerField(blank=True, null=True)),
                ('maturity', models.CharField(blank=True, max_length=1000, null=True)),
                ('cost', models.CharField(blank=True, max_length=1000, null=True)),
                ('input_data', models.CharField(blank=True, max_length=1000, null=True)),
                ('output_data', models.CharField(blank=True, max_length=1000, null=True)),
                ('addition_date', models.DateTimeField(blank=True, null=True)),
                ('last_update', models.DateTimeField(blank=True, null=True)),
                ('collection', models.ManyToManyField(blank=True, to='ifbcat_api.Collection')),
                ('operating_system', models.ManyToManyField(blank=True, to='ifbcat_api.OperatingSystem')),
                ('primary_publication', models.ManyToManyField(blank=True, help_text='Publication(s) that describe the tool as a whole.', related_name='database_doi', to='ifbcat_api.Doi')),
                ('scientific_topics', models.ManyToManyField(blank=True, to='ifbcat_api.Topic')),
                ('tool_credit', models.ManyToManyField(blank=True, to='ifbcat_api.ToolCredit')),
                ('tool_licence', models.ForeignKey(blank=True, help_text='Licence of the tool.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ifbcat_api.licence')),
                ('tool_type', models.ManyToManyField(blank=True, to='ifbcat_api.ToolType')),
            ],
            options={
                'ordering': ('name', 'fairsharingID'),
            },
        ),
    ]
