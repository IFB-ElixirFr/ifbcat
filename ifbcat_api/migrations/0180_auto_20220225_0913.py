# Generated by Django 3.2.12 on 2022-02-25 09:13

from django.db import migrations, models
from django.db.models import Case, When, Value


def migrate_accessibility_to_open_to_event(apps, schema_editor):
    apps.get_model("ifbcat_api", "Event").objects.filter(accessibility__isnull=False).update(
        open_to=Case(
            When(accessibility="Public", then=Value("Everyone")),
            When(accessibility="Private", then=Value("Internal personnel")),
            default=Value("Others"),
        )
    )


def migrate_open_to_to_accessibility_event(apps, schema_editor):
    apps.get_model("ifbcat_api", "Event").objects.filter(open_to__isnull=False).update(
        accessibility=Case(
            When(open_to="Everyone", then=Value("Public")),
            When(open_to="Internal personnel", then=Value("Private")),
            default=Value(""),
        )
    )


def migrate_accessibility_to_open_to_training(apps, schema_editor):
    apps.get_model("ifbcat_api", "Training").objects.filter(accessibility__isnull=False).update(
        open_to=Case(
            When(accessibility="Public", then=Value("Everyone")),
            When(accessibility="Private", then=Value("Internal personnel")),
            default=Value(""),
        )
    )


def migrate_open_to_to_accessibility_training(apps, schema_editor):
    apps.get_model("ifbcat_api", "Training").objects.filter(open_to__isnull=False).update(
        accessibility=Case(
            When(open_to="Everyone", then=Value("Public")),
            When(open_to="Internal personnel", then=Value("Private")),
            default=Value(""),
        )
    )


def migrate_accessibilityNote_to_access_conditions_event(apps, schema_editor):
    Event = apps.get_model("ifbcat_api", "Event")
    result = Event.objects.all()
    for e in result:
        e.access_conditions = e.accessibilityNote
        e.save()


def migrate__access_conditions_to_accessibilityNote_event(apps, schema_editor):
    Event = apps.get_model("ifbcat_api", "Event")
    result = Event.objects.all()
    for e in result:
        e.accessibilityNote = e.access_conditions
        e.save()


def migrate_accessibilityNote_to_access_conditions_training(apps, schema_editor):
    Training = apps.get_model("ifbcat_api", "Training")
    result = Training.objects.all()
    for e in result:
        e.access_conditions = e.accessibilityNote
        e.save()


def migrate__access_conditions_to_accessibilityNote_training(apps, schema_editor):
    Training = apps.get_model("ifbcat_api", "Training")
    result = Training.objects.all()
    for e in result:
        e.accessibilityNote = e.access_conditions
        e.save()



class Migration(migrations.Migration):

    dependencies = [
        ('ifbcat_api', '0179_alter_community_name'),
    ]

    operations = [
        migrations.AddField(
            model_name='event',
            name='access_conditions',
            field=models.TextField(blank=True, help_text='Comment about the audience an internal personnel event is open to and tailored for.', null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='open_to',
            field=models.CharField(choices=[('Everyone', 'Everyone'), ('Internal personnel', 'Internal personnel'), ('Others', 'Others')], default='Others', help_text='Whether the event is for everyone,  internal personnel or others.', max_length=255),
        ),
        migrations.AddField(
            model_name='training',
            name='access_conditions',
            field=models.TextField(blank=True, help_text='Comment about the audience an internal personnel event is open to and tailored for.', null=True),
        ),
        migrations.AddField(
            model_name='training',
            name='open_to',
            field=models.CharField(choices=[('Everyone', 'Everyone'), ('Internal personnel', 'Internal personnel'), ('Others', 'Others')], default='Others', help_text='Whether the event is for everyone,  internal personnel or others.', max_length=255),
        ),
        migrations.RunPython(
            code=migrate_accessibility_to_open_to_event,
            reverse_code=migrate_open_to_to_accessibility_event,
        ),
        migrations.RunPython(
            code=migrate_accessibility_to_open_to_training,
            reverse_code=migrate_open_to_to_accessibility_training,
        ),
        migrations.RunPython(
            code=migrate_accessibilityNote_to_access_conditions_event,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=migrate_accessibilityNote_to_access_conditions_training,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name='event',
            name='accessibility',
        ),
        migrations.RemoveField(
            model_name='event',
            name='accessibilityNote',
        ),
        migrations.RemoveField(
            model_name='training',
            name='accessibility',
        ),
        migrations.RemoveField(
            model_name='training',
            name='accessibilityNote',
        ),
    ]
