# Generated by Django 3.0.7 on 2020-09-03 14:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ifbcat_api', '0105_auto_20200903_1407'),
    ]

    operations = [
        migrations.CreateModel(
            name='TrainingMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the resource.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Should only contains char such as ^[a-zA-Z0-9\\-_~]', regex='^[a-zA-Z0-9 \\-_~]+$')])),
                ('description', models.TextField(help_text='A short description of the resource.')),
                ('doi', models.CharField(help_text='Unique identier (DOI) of the training material, e.g. a Zenodo DOI.', max_length=255, null=True, unique=True)),
                ('fileLocation', models.URLField(help_text='A link to where the training material can be downloaded or accessed.', max_length=255)),
                ('fileName', models.CharField(help_text='The name of a downloadable file containing the training material.', max_length=255)),
                ('difficultyLevel', models.CharField(blank=True, choices=[('Novice', 'Novice'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], help_text='The required experience and skills of the expected audience of the training material.', max_length=255)),
                ('dateCreation', models.DateField(blank=True, help_text='Date when the training material was created.')),
                ('dateUpdate', models.DateField(blank=True, help_text='Date when the training material was updated.')),
                ('license', models.CharField(blank=True, choices=[('License A', 'License A')], help_text='License under which the training material is made available.', max_length=255)),
                ('audienceRoles', models.ManyToManyField(blank=True, help_text='The professional roles of the expected audience of the training material.', related_name='trainingMaterials', to='ifbcat_api.AudienceRole')),
                ('audienceTypes', models.ManyToManyField(blank=True, help_text='The education or professional level of the expected audience of the training material.', related_name='trainingMaterials', to='ifbcat_api.AudienceType')),
                ('communities', models.ManyToManyField(blank=True, help_text='Community which uses the resource.', to='ifbcat_api.Community')),
                ('elixirPlatforms', models.ManyToManyField(blank=True, help_text='ELIXIR Platform which uses the resource.', to='ifbcat_api.ElixirPlatform')),
                ('keywords', models.ManyToManyField(blank=True, help_text='A keyword (beyond EDAM ontology scope) describing the training material.', related_name='trainingMaterials', to='ifbcat_api.Keyword')),
                ('providedBy', models.ManyToManyField(blank=True, help_text='The bioinformatics team that provides the training material.', related_name='trainingMaterials', to='ifbcat_api.BioinformaticsTeam')),
                ('topics', models.ManyToManyField(blank=True, help_text='URIs of EDAM Topic terms describing the scope of the training material.', related_name='trainingMaterials', to='ifbcat_api.Topic')),
                ('user_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComputingFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the resource.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Should only contains char such as ^[a-zA-Z0-9\\-_~]', regex='^[a-zA-Z0-9 \\-_~]+$')])),
                ('description', models.TextField(help_text='A short description of the resource.')),
                ('homepage', models.URLField(help_text='URL where the computing facility can be accessed.', max_length=255)),
                ('accessibility', models.CharField(choices=[('Internal', 'Internal'), ('National', 'National'), ('International', 'International')], help_text='Accessibillity of the computing facility to end-users.', max_length=255)),
                ('requestAccount', models.URLField(blank=True, help_text='URL of web page where one can request access to the computing facility.', max_length=255)),
                ('termsOfUse', models.URLField(blank=True, help_text='URL where terms of use of the computing facility can be found.', max_length=255)),
                ('serverDescription', models.CharField(blank=True, help_text='Description of number and type of servers.', max_length=255)),
                ('storageTb', models.PositiveSmallIntegerField(blank=True, help_text='Amount of storage (TB) provided by the computing facility.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('cpuCores', models.PositiveSmallIntegerField(blank=True, help_text='Number of CPU cores provided by the computing facility.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('ramGb', models.PositiveSmallIntegerField(blank=True, help_text='RAM (GB) provided by the computing facility.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('ramPerCoreGb', models.PositiveSmallIntegerField(blank=True, help_text='RAM (GB) per CPU core provided by the Platform physical infrastructure.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('cpuHoursYearly', models.PositiveSmallIntegerField(blank=True, help_text='Number of CPU hours provided by the computing facility in the last year.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('usersYearly', models.PositiveSmallIntegerField(blank=True, help_text='Number of users served by the computing facility in the last year.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('communities', models.ManyToManyField(blank=True, help_text='Community which uses the resource.', to='ifbcat_api.Community')),
                ('elixirPlatforms', models.ManyToManyField(blank=True, help_text='ELIXIR Platform which uses the resource.', to='ifbcat_api.ElixirPlatform')),
                ('providedBy', models.ForeignKey(help_text='The bioinformatics team that provides the computing facility.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='computingFacilityProvidedBy', to='ifbcat_api.BioinformaticsTeam')),
                ('team', models.ForeignKey(help_text='The team which is maintaining the computing facility.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='computingFacilityTeam', to='ifbcat_api.Team')),
                ('trainingMaterials', models.ManyToManyField(blank=True, help_text='Training material for the computing facility.', related_name='computingFacilities', to='ifbcat_api.TrainingMaterial')),
                ('user_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Computing facilities',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='uses',
            field=models.ManyToManyField(blank=True, help_text='A computing facility which the project uses.', related_name='projects', to='ifbcat_api.ComputingFacility'),
        ),
        migrations.AddField(
            model_name='service',
            name='trainingMaterials',
            field=models.ManyToManyField(blank=True, help_text='Training material(s) provided by the service.', related_name='servicesTrainingMaterials', to='ifbcat_api.TrainingMaterial'),
        ),
        migrations.AddField(
            model_name='trainingevent',
            name='computingFacilities',
            field=models.ManyToManyField(blank=True, help_text='Computing facilities that the training event uses.', related_name='trainingEvents', to='ifbcat_api.ComputingFacility'),
        ),
        migrations.AddField(
            model_name='trainingevent',
            name='trainingMaterials',
            field=models.ManyToManyField(blank=True, help_text='Training material that the training event uses.', related_name='trainingEvents', to='ifbcat_api.TrainingMaterial'),
        ),
    ]
