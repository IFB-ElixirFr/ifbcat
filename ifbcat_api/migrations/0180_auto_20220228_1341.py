# Generated by Django 3.2.12 on 2022-02-28 13:41

from django.db import migrations, models
from django.db.models import Case, When, Value


def migrate_accessibility_to_openTo_event(apps, schema_editor):
    Event = apps.get_model("ifbcat_api", "Event")
    result = Event.objects.all()
    for e in result:
        e.openTo = Case(
            When(accessibility="Private", then=Value("Internal personnel")),
            When(accessibility="Public", then=Value("Everyone")),
            default=Value("Others"),
        )
        e.save()


def migrate_back_event(apps, schema_editor):
    Event = apps.get_model("ifbcat_api", "Event")
    result = Event.objects.all()
    for e in result:
        e.accessibility = Case(
            When(openTo="Internal personnel", then=Value("Private")),
            When(openTo="Everyone", then=Value("Public")),
            default=Value(""),
        )
        e.save()


def migrate_accessibility_to_openTo_training(apps, schema_editor):
    Training = apps.get_model("ifbcat_api", "Training")
    result = Training.objects.all()
    for t in result:
        t.openTo = Case(
            When(accessibility="Private", then=Value("Internal personnel")),
            When(accessibility="Public", then=Value("Everyone")),
            default=Value("Others"),
        )
        t.save()


def migrate_back_training(apps, schema_editor):
    Training = apps.get_model("ifbcat_api", "Training")
    result = Training.objects.all()
    for t in result:
        t.accessibility = Case(
            When(openTo="Internal personnel", then=Value("Private")),
            When(openTo="Everyone", then=Value("Public")),
            default=Value(""),
        )
        t.save()


class Migration(migrations.Migration):
    dependencies = [
        ('ifbcat_api', '0179_alter_community_name'),
    ]

    operations = [
        migrations.AlterField(
            model_name='event',
            name='accessibilityNote',
            field=models.TextField(blank=True,
                                   help_text='Comment about the audience an event is open to and tailored for.',
                                   null=True),
        ),
        migrations.AlterField(
            model_name='training',
            name='accessibilityNote',
            field=models.TextField(blank=True,
                                   help_text='Comment about the audience an event is open to and tailored for.',
                                   null=True),
        ),
        migrations.RenameField(
            model_name='event',
            old_name='accessibilityNote',
            new_name='accessConditions',
        ),
        migrations.RenameField(
            model_name='training',
            old_name='accessibilityNote',
            new_name='accessConditions',
        ),
        migrations.AddField(
            model_name='event',
            name='openTo',
            field=models.CharField(
                choices=[('Everyone', 'Everyone'), ('Internal personnel', 'Internal personnel'), ('Others', 'Others')],
                default='', help_text='Whether the event is for everyone, internal personnel or others.',
                max_length=255),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='training',
            name='openTo',
            field=models.CharField(
                choices=[('Everyone', 'Everyone'), ('Internal personnel', 'Internal personnel'), ('Others', 'Others')],
                default='', help_text='Whether the event is for everyone, internal personnel or others.',
                max_length=255),
            preserve_default=False,
        ),
        migrations.RunPython(code=migrate_accessibility_to_openTo_event, reverse_code=migrate_back_event),
        migrations.RunPython(code=migrate_accessibility_to_openTo_training, reverse_code=migrate_back_training),
        migrations.RemoveField(
            model_name='event',
            name='accessibility',
        ),
        migrations.RemoveField(
            model_name='training',
            name='accessibility',
        ),
    ]
