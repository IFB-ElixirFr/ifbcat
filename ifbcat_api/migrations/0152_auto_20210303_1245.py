# Generated by Django 3.0.11 on 2021-03-03 12:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ifbcat_api', '0151_auto_20210303_1242'),
    ]

    operations = [
        migrations.AlterField(
            model_name='event',
            name='organisedByOrganisations',
            field=models.ManyToManyField(blank=True, help_text='An organisation that is organizing the event.', to='ifbcat_api.Organisation'),
        ),
        migrations.AlterField(
            model_name='event',
            name='organisedByTeams',
            field=models.ManyToManyField(blank=True, help_text='A Team that is organizing the event.', to='ifbcat_api.Team'),
        ),
        migrations.CreateModel(
            name='TrainingEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name / title of the event.', max_length=255)),
                ('shortName', models.CharField(blank=True, help_text='Short name (or acronym) of the event.', max_length=255)),
                ('description', models.TextField(help_text='Description of the event.')),
                ('homepage', models.URLField(help_text='URL of event homepage.', max_length=255)),
                ('type', models.CharField(blank=True, choices=[('Workshop', 'Workshop'), ('Training course', 'Training course'), ('Meeting', 'Meeting'), ('Conference', 'Conference')], help_text="The type of event e.g. 'Training course'.", max_length=255)),
                ('venue', models.TextField(blank=True, help_text='The address of the venue where the event will be held.')),
                ('city', models.CharField(blank=True, help_text='The nearest city to where the event will be held.', max_length=255)),
                ('country', models.CharField(blank=True, help_text='The country where the event will be held.', max_length=255)),
                ('onlineOnly', models.BooleanField(blank=True, help_text='Whether the event is hosted online only.', null=True)),
                ('accessibility', models.CharField(choices=[('Public', 'Public'), ('Private', 'Private')], help_text='Whether the event is public or private.', max_length=255)),
                ('accessibilityNote', models.CharField(blank=True, help_text='Comment about the audience a private event is open to and tailored for.', max_length=255)),
                ('maxParticipants', models.PositiveSmallIntegerField(blank=True, help_text='Maximum number of participants to the event.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('contactName', models.CharField(help_text='Name of person to contact about the event.', max_length=255)),
                ('contactEmail', models.EmailField(help_text='Email of person to contact about the event.', max_length=254)),
                ('market', models.CharField(blank=True, help_text='Geographical area which is the focus of event marketing efforts.', max_length=255)),
                ('logo_url', models.URLField(blank=True, help_text='URL of logo of event.', max_length=512, null=True)),
                ('difficultyLevel', models.CharField(blank=True, choices=[('Novice', 'Novice'), ('Intermediate', 'Intermediate'), ('Advanced', 'Advanced')], help_text='The required experience and skills of the expected audience of the training event.', max_length=255)),
                ('learningOutcomes', models.TextField(blank=True, help_text='Expected learning outcomes from the training event.')),
                ('hoursPresentations', models.PositiveSmallIntegerField(blank=True, help_text='Total time (hours) of presented training material.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('hoursHandsOn', models.PositiveSmallIntegerField(blank=True, help_text='Total time (hours) of hands-on / practical work.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('hoursTotal', models.PositiveSmallIntegerField(blank=True, help_text='Total time investment (hours) of the training event, including recommended prework.', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('personalised', models.BooleanField(blank=True, help_text='Whether the training is tailored to the individual in some way (BYOD, personal tutoring etc.)', null=True)),
                ('audienceRoles', models.ManyToManyField(blank=True, help_text='The professional roles of the expected audience of the training event.', related_name='trainingEvents', to='ifbcat_api.AudienceRole')),
                ('audienceTypes', models.ManyToManyField(blank=True, help_text='The education or professional level of the expected audience of the training event.', related_name='trainingEvents', to='ifbcat_api.AudienceType')),
                ('communities', models.ManyToManyField(blank=True, help_text='Community for which the event is relevant.', to='ifbcat_api.Community')),
                ('computingFacilities', models.ManyToManyField(blank=True, help_text='Computing facilities that the training event uses.', related_name='trainingEvents', to='ifbcat_api.ComputingFacility')),
                ('contactId', models.ForeignKey(help_text='IFB ID of person to contact about the event.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('costs', models.ManyToManyField(blank=True, help_text="Monetary cost to attend the event, e.g. 'Free to academics'.", to='ifbcat_api.EventCost')),
                ('dates', models.ManyToManyField(help_text='Date(s) and optional time periods on which the event takes place.', to='ifbcat_api.EventDate')),
                ('elixirPlatforms', models.ManyToManyField(blank=True, help_text='ELIXIR Platform to which the event is relevant.', to='ifbcat_api.ElixirPlatform')),
                ('keywords', models.ManyToManyField(blank=True, help_text='A keyword (beyond EDAM ontology scope) describing the event.', to='ifbcat_api.Keyword')),
                ('organisedByOrganisations', models.ManyToManyField(blank=True, help_text='An organisation that is organizing the event.', to='ifbcat_api.Organisation')),
                ('organisedByTeams', models.ManyToManyField(blank=True, help_text='A Team that is organizing the event.', to='ifbcat_api.Team')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text="A skill which the audience should (ideally) possess to get the most out of the event, e.g. 'Python'.", to='ifbcat_api.EventPrerequisite')),
                ('sponsoredBy', models.ManyToManyField(blank=True, help_text='An institutional entity that is sponsoring the event.', to='ifbcat_api.EventSponsor')),
                ('topics', models.ManyToManyField(blank=True, help_text='URIs of EDAM Topic terms describing the scope of the event.', to='ifbcat_api.Topic')),
                ('trainers', models.ManyToManyField(blank=True, help_text='Details of people who are providing training at the training event.', related_name='trainingEvents', to='ifbcat_api.Trainer')),
                ('trainingMaterials', models.ManyToManyField(blank=True, help_text='Training material that the training event uses.', related_name='trainingEvents', to='ifbcat_api.TrainingMaterial')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='service',
            name='trainingEvents',
            field=models.ManyToManyField(blank=True, help_text='Training event(s) provided by the service.', related_name='services', to='ifbcat_api.TrainingEvent'),
        ),
        migrations.AddField(
            model_name='trainingeventmetrics',
            name='trainingEvent',
            field=models.ForeignKey(default='', help_text='Training event to which the metrics are associated.', on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='ifbcat_api.TrainingEvent'),
            preserve_default=False,
        ),
    ]
